
# -*- coding: utf-8 -*-
from odoo.addons.account.tests.account_test_savepoint import AccountingSavepointCase
from odoo.tests.common import Form
from odoo.tests import tagged
from odoo import fields

import logging
_logger = logging.getLogger(__name__)


@tagged('post_install', '-at_install')
class TestAccountMoveReversal(AccountingSavepointCase):

    # -------------------------------------------------------------------------
    # TESTS out_invoice
    # -------------------------------------------------------------------------

    def test_reversal_out_invoice_1_draft_refund(self):
        # Create an 'out_invoice' journal entry.
        move = self.env['account.move'].with_context(default_type='out_invoice').create({
            'type': 'out_invoice',
            'partner_id': self.partner_a.id,
            'invoice_date': fields.Date.from_string('2019-01-01'),
            'invoice_payment_term_id': self.pay_terms_immediate.id,
            'invoice_line_ids': [(0, None, {
                'partner_id': self.partner_a.id,
                'product_id': self.product_a.id,
                'product_uom_id': self.product_a.uom_id.id,
                'name': self.product_a.name,
                'price_unit': 1000.0,
                'quantity': 1,
                'tax_ids': [(6, 0, self.product_a.taxes_id.ids)],
            })]
        })

        # Create an 'out_refund' journal entry with refund_method='refund'.
        move_reversal = self.env['account.move.reversal'].with_context(active_ids=move.ids).create({
            'date': fields.Date.from_string('2019-02-01'),
            'reason': 'no reason',
            'refund_method': 'refund',
        })
        reversal = move_reversal.reverse_moves()
        reverse_move = self.env['account.move'].browse(reversal['res_id'])

        self.assertAmlsValues(reverse_move.invoice_line_ids, [
            {
                'name': 'product_a',
                'product_id': self.product_a.id,
                'account_id': self.parent_acc_revenue_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': self.uom_unit.id,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 1000.0,
                'price_subtotal': 1000.0,
                'price_total': 1150.0,
                'tax_ids': self.parent_tax_sale_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 1000.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
            },
        ])
        self.assertAmlsValues(reverse_move.line_ids, [
            {
                'name': '/',
                'product_id': False,
                'account_id': self.parent_acc_receivable_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': -1150.0,
                'price_subtotal': -1150.0,
                'price_total': -1150.0,
                'tax_ids': [],
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 1150.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': 'balance',
                'date_maturity': fields.Date.from_string('2019-01-01'),
                'tax_exigible': True,
            },
            {
                'name': self.parent_tax_sale_1.name,
                'product_id': False,
                'account_id': self.parent_tax_sale_1.refund_account_id.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 150.0,
                'price_subtotal': 150.0,
                'price_total': 150.0,
                'tax_ids': [],
                'tax_line_id': self.parent_tax_sale_1.id,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 150.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': 'tax',
                'date_maturity': False,
                'tax_exigible': True,
            },
            {
                'name': 'product_a',
                'product_id': self.product_a.id,
                'account_id': self.parent_acc_revenue_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': self.uom_unit.id,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 1000.0,
                'price_subtotal': 1000.0,
                'price_total': 1150.0,
                'tax_ids': self.parent_tax_sale_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 1000.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
            },
        ])
        self.assertRecordValues(reverse_move, [{
            'partner_id': self.partner_a.id,
            'currency_id': self.company_parent.currency_id.id,
            'journal_id': self.parent_journal_sale_1.id,
            'type': 'out_refund',
            'date': fields.Date.from_string('2019-02-01'),
            'fiscal_position_id': False,
            'invoice_payment_ref': 'no reason',
            'invoice_payment_term_id': self.pay_terms_immediate.id,
            'amount_untaxed': 1000.0,
            'amount_tax': 150.0,
            'amount_total': 1150.0,
            'amount_residual': 1150.0,
            'state': 'draft',
            'invoice_payment_state': 'not_paid',
        }])

    def test_reversal_out_invoice_2_cancel_refund(self):
        # Create an 'out_invoice' journal entry.
        move = self.env['account.move'].with_context(default_type='out_invoice').create({
            'type': 'out_invoice',
            'partner_id': self.partner_a.id,
            'invoice_date': fields.Date.from_string('2019-01-01'),
            'invoice_payment_term_id': self.pay_terms_immediate.id,
            'invoice_line_ids': [(0, None, {
                'partner_id': self.partner_a.id,
                'product_id': self.product_a.id,
                'product_uom_id': self.product_a.uom_id.id,
                'name': self.product_a.name,
                'price_unit': 1000.0,
                'quantity': 1,
                'tax_ids': [(6, 0, self.product_a.taxes_id.ids)],
            })]
        })

        # Create an 'out_refund' journal entry with refund_method='cancel'.
        move_reversal = self.env['account.move.reversal'].with_context(active_ids=move.ids).create({
            'date': fields.Date.from_string('2019-02-01'),
            'reason': 'no reason',
            'refund_method': 'cancel',
        })
        reversal = move_reversal.reverse_moves()
        reverse_move = self.env['account.move'].browse(reversal['res_id'])

        self.assertAmlsValues(reverse_move.invoice_line_ids, [
            {
                'name': 'product_a',
                'product_id': self.product_a.id,
                'account_id': self.parent_acc_revenue_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': self.uom_unit.id,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 1000.0,
                'price_subtotal': 1000.0,
                'price_total': 1150.0,
                'tax_ids': self.parent_tax_sale_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 1000.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
                'amount_residual': 0.0,
            },
        ])
        self.assertAmlsValues(reverse_move.line_ids, [
            {
                'name': '/',
                'product_id': False,
                'account_id': self.parent_acc_receivable_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': -1150.0,
                'price_subtotal': -1150.0,
                'price_total': -1150.0,
                'tax_ids': [],
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 1150.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': 'balance',
                'date_maturity': fields.Date.from_string('2019-01-01'),
                'tax_exigible': True,
                'amount_residual': 0.0,
            },
            {
                'name': self.parent_tax_sale_1.name,
                'product_id': False,
                'account_id': self.parent_tax_sale_1.refund_account_id.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 150.0,
                'price_subtotal': 150.0,
                'price_total': 150.0,
                'tax_ids': [],
                'tax_line_id': self.parent_tax_sale_1.id,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 150.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': 'tax',
                'date_maturity': False,
                'tax_exigible': True,
                'amount_residual': 0.0,
            },
            {
                'name': 'product_a',
                'product_id': self.product_a.id,
                'account_id': self.parent_acc_revenue_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': self.uom_unit.id,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 1000.0,
                'price_subtotal': 1000.0,
                'price_total': 1150.0,
                'tax_ids': self.parent_tax_sale_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 1000.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
                'amount_residual': 0.0,
            },
        ])
        self.assertRecordValues(reverse_move, [{
            'partner_id': self.partner_a.id,
            'currency_id': self.company_parent.currency_id.id,
            'journal_id': self.parent_journal_sale_1.id,
            'type': 'out_refund',
            'date': fields.Date.from_string('2019-02-01'),
            'fiscal_position_id': False,
            'invoice_payment_ref': 'no reason',
            'invoice_payment_term_id': self.pay_terms_immediate.id,
            'amount_untaxed': 1000.0,
            'amount_tax': 150.0,
            'amount_total': 1150.0,
            'amount_residual': 0.0,
            'state': 'posted',
            'invoice_payment_state': 'paid',
        }])

    def test_reversal_out_invoice_3_modify_refund(self):
        # Create an 'out_invoice' journal entry.
        move = self.env['account.move'].with_context(default_type='out_invoice').create({
            'type': 'out_invoice',
            'partner_id': self.partner_a.id,
            'invoice_date': fields.Date.from_string('2019-01-01'),
            'invoice_payment_term_id': self.pay_terms_immediate.id,
            'invoice_line_ids': [(0, None, {
                'partner_id': self.partner_a.id,
                'product_id': self.product_a.id,
                'product_uom_id': self.product_a.uom_id.id,
                'name': self.product_a.name,
                'price_unit': 1000.0,
                'quantity': 1,
                'tax_ids': [(6, 0, self.product_a.taxes_id.ids)],
            })]
        })

        # Create an 'out_refund' journal entry with refund_method='modify'.
        move_reversal = self.env['account.move.reversal'].with_context(active_ids=move.ids).create({
            'date': fields.Date.from_string('2019-02-01'),
            'reason': 'no reason',
            'refund_method': 'modify',
        })
        reversal = move_reversal.reverse_moves()
        reverse_move = move.mapped('line_ids.matched_credit_ids.credit_move_id.move_id')
        draft_move = self.env['account.move'].browse(reversal['res_id'])

        # Check the reverse_move.
        self.assertTrue(reverse_move.exists())
        self.assertAmlsValues(reverse_move.invoice_line_ids, [
            {
                'name': 'product_a',
                'product_id': self.product_a.id,
                'account_id': self.parent_acc_revenue_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': self.uom_unit.id,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 1000.0,
                'price_subtotal': 1000.0,
                'price_total': 1150.0,
                'tax_ids': self.parent_tax_sale_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 1000.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
            },
        ])
        self.assertAmlsValues(reverse_move.line_ids, [
            {
                'name': '/',
                'product_id': False,
                'account_id': self.parent_acc_receivable_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': -1150.0,
                'price_subtotal': -1150.0,
                'price_total': -1150.0,
                'tax_ids': [],
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 1150.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': 'balance',
                'date_maturity': fields.Date.from_string('2019-01-01'),
                'tax_exigible': True,
            },
            {
                'name': self.parent_tax_sale_1.name,
                'product_id': False,
                'account_id': self.parent_tax_sale_1.refund_account_id.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 150.0,
                'price_subtotal': 150.0,
                'price_total': 150.0,
                'tax_ids': [],
                'tax_line_id': self.parent_tax_sale_1.id,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 150.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': 'tax',
                'date_maturity': False,
                'tax_exigible': True,
            },
            {
                'name': 'product_a',
                'product_id': self.product_a.id,
                'account_id': self.parent_acc_revenue_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': self.uom_unit.id,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 1000.0,
                'price_subtotal': 1000.0,
                'price_total': 1150.0,
                'tax_ids': self.parent_tax_sale_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 1000.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
            },
        ])
        self.assertRecordValues(reverse_move, [{
            'partner_id': self.partner_a.id,
            'currency_id': self.company_parent.currency_id.id,
            'journal_id': self.parent_journal_sale_1.id,
            'type': 'out_refund',
            'date': fields.Date.from_string('2019-02-01'),
            'fiscal_position_id': False,
            'invoice_payment_ref': 'no reason',
            'invoice_payment_term_id': self.pay_terms_immediate.id,
            'amount_untaxed': 1000.0,
            'amount_tax': 150.0,
            'amount_total': 1150.0,
            'amount_residual': 0.0,
            'state': 'posted',
            'invoice_payment_state': 'paid',
        }])

        # Check the draft move.
        self.assertAmlsValues(draft_move.invoice_line_ids, [
            {
                'name': 'product_a',
                'product_id': self.product_a.id,
                'account_id': self.parent_acc_revenue_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': self.uom_unit.id,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 1000.0,
                'price_subtotal': 1000.0,
                'price_total': 1150.0,
                'tax_ids': self.parent_tax_sale_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 1000.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
            },
        ])
        self.assertAmlsValues(draft_move.line_ids, [
            {
                'name': '/',
                'product_id': False,
                'account_id': self.parent_acc_receivable_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': -1150.0,
                'price_subtotal': -1150.0,
                'price_total': -1150.0,
                'tax_ids': [],
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 1150.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': 'balance',
                'date_maturity': fields.Date.from_string('2019-01-01'),
                'tax_exigible': True,
            },
            {
                'name': self.parent_tax_sale_1.name,
                'product_id': False,
                'account_id': self.parent_tax_sale_1.account_id.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 150.0,
                'price_subtotal': 150.0,
                'price_total': 150.0,
                'tax_ids': [],
                'tax_line_id': self.parent_tax_sale_1.id,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 150.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': 'tax',
                'date_maturity': False,
                'tax_exigible': True,
            },
            {
                'name': 'product_a',
                'product_id': self.product_a.id,
                'account_id': self.parent_acc_revenue_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': self.uom_unit.id,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 1000.0,
                'price_subtotal': 1000.0,
                'price_total': 1150.0,
                'tax_ids': self.parent_tax_sale_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 1000.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
            },
        ])
        self.assertRecordValues(draft_move, [{
            'partner_id': self.partner_a.id,
            'currency_id': self.company_parent.currency_id.id,
            'journal_id': self.parent_journal_sale_1.id,
            'type': 'out_invoice',
            'date': fields.Date.from_string('2019-02-01'),
            'fiscal_position_id': False,
            'invoice_payment_ref': '/',
            'invoice_payment_term_id': self.pay_terms_immediate.id,
            'amount_untaxed': 1000.0,
            'amount_tax': 150.0,
            'amount_total': 1150.0,
            'amount_residual': 1150.0,
            'state': 'draft',
            'invoice_payment_state': 'not_paid',
        }])

    def test_reversal_out_invoice_4_modify_refund_manual_tax(self):
        # Create an 'out_invoice' journal entry.
        move = self.env['account.move'].with_context(default_type='out_invoice').create({
            'type': 'out_invoice',
            'partner_id': self.partner_a.id,
            'invoice_date': fields.Date.from_string('2019-01-01'),
            'invoice_payment_term_id': self.pay_terms_immediate.id,
            'invoice_line_ids': [(0, None, {
                'partner_id': self.partner_a.id,
                'product_id': self.product_a.id,
                'product_uom_id': self.product_a.uom_id.id,
                'name': self.product_a.name,
                'price_unit': 1000.0,
                'quantity': 1,
                'tax_ids': [(6, 0, self.product_a.taxes_id.ids)],
            })]
        })

        move_form = Form(move)
        index_tax_line, _ = self._search_candidate_records(move.line_ids, {'tax_line_id': self.product_a.taxes_id.id})
        with move_form.line_ids.edit(index_tax_line) as line_form:
            line_form.credit += 1.0
        move = move_form.save()

        # Create an 'out_refund' journal entry with refund_method='modify'.
        move_reversal = self.env['account.move.reversal'].with_context(active_ids=move.ids).create({
            'date': fields.Date.from_string('2019-02-01'),
            'reason': 'no reason',
            'refund_method': 'modify',
        })
        reversal = move_reversal.reverse_moves()
        reverse_move = move.mapped('line_ids.matched_credit_ids.credit_move_id.move_id')
        draft_move = self.env['account.move'].browse(reversal['res_id'])

        # Check the reverse_move.
        self.assertTrue(reverse_move.exists())
        self.assertAmlsValues(reverse_move.invoice_line_ids, [
            {
                'name': 'product_a',
                'product_id': self.product_a.id,
                'account_id': self.parent_acc_revenue_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': self.uom_unit.id,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 1000.0,
                'price_subtotal': 1000.0,
                'price_total': 1150.0,
                'tax_ids': self.parent_tax_sale_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 1000.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
            },
        ])
        self.assertAmlsValues(reverse_move.line_ids, [
            {
                'name': '/',
                'product_id': False,
                'account_id': self.parent_acc_receivable_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': -1151.0,
                'price_subtotal': -1151.0,
                'price_total': -1151.0,
                'tax_ids': [],
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 1151.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': 'balance',
                'date_maturity': fields.Date.from_string('2019-01-01'),
                'tax_exigible': True,
            },
            {
                'name': self.parent_tax_sale_1.name,
                'product_id': False,
                'account_id': self.parent_tax_sale_1.refund_account_id.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 151.0,
                'price_subtotal': 151.0,
                'price_total': 151.0,
                'tax_ids': [],
                'tax_line_id': self.parent_tax_sale_1.id,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 151.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': 'tax',
                'date_maturity': False,
                'tax_exigible': True,
            },
            {
                'name': 'product_a',
                'product_id': self.product_a.id,
                'account_id': self.parent_acc_revenue_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': self.uom_unit.id,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 1000.0,
                'price_subtotal': 1000.0,
                'price_total': 1150.0,
                'tax_ids': self.parent_tax_sale_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 1000.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
            },
        ])
        self.assertRecordValues(reverse_move, [{
            'partner_id': self.partner_a.id,
            'currency_id': self.company_parent.currency_id.id,
            'journal_id': self.parent_journal_sale_1.id,
            'type': 'out_refund',
            'date': fields.Date.from_string('2019-02-01'),
            'fiscal_position_id': False,
            'invoice_payment_ref': 'no reason',
            'invoice_payment_term_id': self.pay_terms_immediate.id,
            'amount_untaxed': 1000.0,
            'amount_tax': 151.0,
            'amount_total': 1151.0,
            'amount_residual': 0.0,
            'state': 'posted',
            'invoice_payment_state': 'paid',
        }])

        # Check the draft move.
        self.assertAmlsValues(draft_move.invoice_line_ids, [
            {
                'name': 'product_a',
                'product_id': self.product_a.id,
                'account_id': self.parent_acc_revenue_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': self.uom_unit.id,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 1000.0,
                'price_subtotal': 1000.0,
                'price_total': 1150.0,
                'tax_ids': self.parent_tax_sale_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 1000.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
            },
        ])
        self.assertAmlsValues(draft_move.line_ids, [
            {
                'name': '/',
                'product_id': False,
                'account_id': self.parent_acc_receivable_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': -1151.0,
                'price_subtotal': -1151.0,
                'price_total': -1151.0,
                'tax_ids': [],
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 1151.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': 'balance',
                'date_maturity': fields.Date.from_string('2019-01-01'),
                'tax_exigible': True,
            },
            {
                'name': self.parent_tax_sale_1.name,
                'product_id': False,
                'account_id': self.parent_tax_sale_1.account_id.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 151.0,
                'price_subtotal': 151.0,
                'price_total': 151.0,
                'tax_ids': [],
                'tax_line_id': self.parent_tax_sale_1.id,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 151.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': 'tax',
                'date_maturity': False,
                'tax_exigible': True,
            },
            {
                'name': 'product_a',
                'product_id': self.product_a.id,
                'account_id': self.parent_acc_revenue_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': self.uom_unit.id,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 1000.0,
                'price_subtotal': 1000.0,
                'price_total': 1150.0,
                'tax_ids': self.parent_tax_sale_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 1000.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
            },
        ])
        self.assertRecordValues(draft_move, [{
            'partner_id': self.partner_a.id,
            'currency_id': self.company_parent.currency_id.id,
            'journal_id': self.parent_journal_sale_1.id,
            'type': 'out_invoice',
            'date': fields.Date.from_string('2019-02-01'),
            'fiscal_position_id': False,
            'invoice_payment_ref': '/',
            'invoice_payment_term_id': self.pay_terms_immediate.id,
            'amount_untaxed': 1000.0,
            'amount_tax': 151.0,
            'amount_total': 1151.0,
            'amount_residual': 1151.0,
            'state': 'draft',
            'invoice_payment_state': 'not_paid',
        }])

    # -------------------------------------------------------------------------
    # TESTS in_invoice
    # -------------------------------------------------------------------------

    def test_reversal_in_invoice_1_draft_refund(self):
        # Create an 'in_invoice' journal entry.
        move = self.env['account.move'].with_context(default_type='in_invoice').create({
            'type': 'in_invoice',
            'partner_id': self.partner_a.id,
            'invoice_date': fields.Date.from_string('2019-01-01'),
            'invoice_payment_term_id': self.pay_terms_immediate.id,
            'invoice_line_ids': [(0, None, {
                'partner_id': self.partner_a.id,
                'product_id': self.product_a.id,
                'product_uom_id': self.product_a.uom_id.id,
                'name': self.product_a.name,
                'price_unit': 800.0,
                'quantity': 1,
                'tax_ids': [(6, 0, self.product_a.supplier_taxes_id.ids)],
            })]
        })

        # Create an 'out_refund' journal entry with refund_method='refund'.
        move_reversal = self.env['account.move.reversal'].with_context(active_ids=move.ids).create({
            'date': fields.Date.from_string('2019-02-01'),
            'reason': 'no reason',
            'refund_method': 'refund',
        })
        reversal = move_reversal.reverse_moves()
        reverse_move = self.env['account.move'].browse(reversal['res_id'])

        self.assertAmlsValues(reverse_move.invoice_line_ids, [
            {
                'name': 'product_a',
                'product_id': self.product_a.id,
                'account_id': self.parent_acc_expense_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': self.uom_unit.id,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 800.0,
                'price_subtotal': 800.0,
                'price_total': 920.0,
                'tax_ids': self.parent_tax_purchase_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 800.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
            },
        ])
        self.assertAmlsValues(reverse_move.line_ids, [
            {
                'name': '/',
                'product_id': False,
                'account_id': self.parent_acc_payable_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': -920.0,
                'price_subtotal': -920.0,
                'price_total': -920.0,
                'tax_ids': [],
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 920.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': 'balance',
                'date_maturity': fields.Date.from_string('2019-01-01'),
                'tax_exigible': True,
            },
            {
                'name': self.parent_tax_sale_1.name,
                'product_id': False,
                'account_id': self.parent_tax_purchase_1.refund_account_id.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 120.0,
                'price_subtotal': 120.0,
                'price_total': 120.0,
                'tax_ids': [],
                'tax_line_id': self.parent_tax_purchase_1.id,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 120.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': 'tax',
                'date_maturity': False,
                'tax_exigible': True,
            },
            {
                'name': 'product_a',
                'product_id': self.product_a.id,
                'account_id': self.parent_acc_expense_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': self.uom_unit.id,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 800.0,
                'price_subtotal': 800.0,
                'price_total': 920.0,
                'tax_ids': self.parent_tax_purchase_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 800.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
            },
        ])
        self.assertRecordValues(reverse_move, [{
            'partner_id': self.partner_a.id,
            'currency_id': self.company_parent.currency_id.id,
            'journal_id': self.parent_journal_purchase_1.id,
            'type': 'in_refund',
            'date': fields.Date.from_string('2019-02-01'),
            'fiscal_position_id': False,
            'invoice_payment_ref': 'no reason',
            'invoice_payment_term_id': self.pay_terms_immediate.id,
            'amount_untaxed': 800.0,
            'amount_tax': 120.0,
            'amount_total': 920.0,
            'amount_residual': 920.0,
            'state': 'draft',
            'invoice_payment_state': 'not_paid',
        }])

    def test_reversal_in_invoice_2_cancel_refund(self):
        # Create an 'in_invoice' journal entry.
        move = self.env['account.move'].with_context(default_type='in_invoice').create({
            'type': 'in_invoice',
            'partner_id': self.partner_a.id,
            'invoice_date': fields.Date.from_string('2019-01-01'),
            'invoice_payment_term_id': self.pay_terms_immediate.id,
            'invoice_line_ids': [(0, None, {
                'partner_id': self.partner_a.id,
                'product_id': self.product_a.id,
                'product_uom_id': self.product_a.uom_id.id,
                'name': self.product_a.name,
                'price_unit': 800.0,
                'quantity': 1,
                'tax_ids': [(6, 0, self.product_a.supplier_taxes_id.ids)],
            })]
        })

        # Create an 'out_refund' journal entry with refund_method='cancel'.
        move_reversal = self.env['account.move.reversal'].with_context(active_ids=move.ids).create({
            'date': fields.Date.from_string('2019-02-01'),
            'reason': 'no reason',
            'refund_method': 'cancel',
        })
        reversal = move_reversal.reverse_moves()
        reverse_move = self.env['account.move'].browse(reversal['res_id'])

        self.assertAmlsValues(reverse_move.invoice_line_ids, [
            {
                'name': 'product_a',
                'product_id': self.product_a.id,
                'account_id': self.parent_acc_expense_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': self.uom_unit.id,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 800.0,
                'price_subtotal': 800.0,
                'price_total': 920.0,
                'tax_ids': self.parent_tax_purchase_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 800.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
                'amount_residual': 0.0,
            },
        ])
        self.assertAmlsValues(reverse_move.line_ids, [
            {
                'name': '/',
                'product_id': False,
                'account_id': self.parent_acc_payable_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': -920.0,
                'price_subtotal': -920.0,
                'price_total': -920.0,
                'tax_ids': [],
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 920.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': 'balance',
                'date_maturity': fields.Date.from_string('2019-01-01'),
                'tax_exigible': True,
                'amount_residual': 0.0,
            },
            {
                'name': self.parent_tax_purchase_1.name,
                'product_id': False,
                'account_id': self.parent_tax_purchase_1.refund_account_id.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 120.0,
                'price_subtotal': 120.0,
                'price_total': 120.0,
                'tax_ids': [],
                'tax_line_id': self.parent_tax_purchase_1.id,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 120.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': 'tax',
                'date_maturity': False,
                'tax_exigible': True,
                'amount_residual': 0.0,
            },
            {
                'name': 'product_a',
                'product_id': self.product_a.id,
                'account_id': self.parent_acc_expense_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': self.uom_unit.id,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 800.0,
                'price_subtotal': 800.0,
                'price_total': 920.0,
                'tax_ids': self.parent_tax_purchase_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 800.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
                'amount_residual': 0.0,
            },
        ])
        self.assertRecordValues(reverse_move, [{
            'partner_id': self.partner_a.id,
            'currency_id': self.company_parent.currency_id.id,
            'journal_id': self.parent_journal_purchase_1.id,
            'type': 'in_refund',
            'date': fields.Date.from_string('2019-02-01'),
            'fiscal_position_id': False,
            'invoice_payment_ref': 'no reason',
            'invoice_payment_term_id': self.pay_terms_immediate.id,
            'amount_untaxed': 800.0,
            'amount_tax': 120.0,
            'amount_total': 920.0,
            'amount_residual': 0.0,
            'state': 'posted',
            'invoice_payment_state': 'paid',
        }])

    def test_reversal_in_invoice_3_modify_refund(self):
        # Create an 'in_invoice' journal entry.
        move = self.env['account.move'].with_context(default_type='in_invoice').create({
            'type': 'in_invoice',
            'partner_id': self.partner_a.id,
            'invoice_date': fields.Date.from_string('2019-01-01'),
            'invoice_payment_term_id': self.pay_terms_immediate.id,
            'invoice_line_ids': [(0, None, {
                'partner_id': self.partner_a.id,
                'product_id': self.product_a.id,
                'product_uom_id': self.product_a.uom_id.id,
                'name': self.product_a.name,
                'price_unit': 800.0,
                'quantity': 1,
                'tax_ids': [(6, 0, self.product_a.supplier_taxes_id.ids)],
            })]
        })

        # Create an 'out_refund' journal entry with refund_method='modify'.
        move_reversal = self.env['account.move.reversal'].with_context(active_ids=move.ids).create({
            'date': fields.Date.from_string('2019-02-01'),
            'reason': 'no reason',
            'refund_method': 'modify',
        })
        reversal = move_reversal.reverse_moves()
        reverse_move = move.mapped('line_ids.matched_debit_ids.debit_move_id.move_id')
        draft_move = self.env['account.move'].browse(reversal['res_id'])

        # Check the reverse_move.
        self.assertTrue(reverse_move.exists())
        self.assertAmlsValues(reverse_move.invoice_line_ids, [
            {
                'name': 'product_a',
                'product_id': self.product_a.id,
                'account_id': self.parent_acc_expense_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': self.uom_unit.id,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 800.0,
                'price_subtotal': 800.0,
                'price_total': 920.0,
                'tax_ids': self.parent_tax_purchase_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 800.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
            },
        ])
        self.assertAmlsValues(reverse_move.line_ids, [
            {
                'name': '/',
                'product_id': False,
                'account_id': self.parent_acc_payable_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': -920.0,
                'price_subtotal': -920.0,
                'price_total': -920.0,
                'tax_ids': [],
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 920.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': 'balance',
                'date_maturity': fields.Date.from_string('2019-01-01'),
                'tax_exigible': True,
            },
            {
                'name': self.parent_tax_purchase_1.name,
                'product_id': False,
                'account_id': self.parent_tax_purchase_1.refund_account_id.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 120.0,
                'price_subtotal': 120.0,
                'price_total': 120.0,
                'tax_ids': [],
                'tax_line_id': self.parent_tax_purchase_1.id,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 120.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': 'tax',
                'date_maturity': False,
                'tax_exigible': True,
            },
            {
                'name': 'product_a',
                'product_id': self.product_a.id,
                'account_id': self.parent_acc_expense_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': self.uom_unit.id,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 800.0,
                'price_subtotal': 800.0,
                'price_total': 920.0,
                'tax_ids': self.parent_tax_purchase_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 800.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
            },
        ])
        self.assertRecordValues(reverse_move, [{
            'partner_id': self.partner_a.id,
            'currency_id': self.company_parent.currency_id.id,
            'journal_id': self.parent_journal_purchase_1.id,
            'type': 'in_refund',
            'date': fields.Date.from_string('2019-02-01'),
            'fiscal_position_id': False,
            'invoice_payment_ref': 'no reason',
            'invoice_payment_term_id': self.pay_terms_immediate.id,
            'amount_untaxed': 800.0,
            'amount_tax': 120.0,
            'amount_total': 920.0,
            'amount_residual': 0.0,
            'state': 'posted',
            'invoice_payment_state': 'paid',
        }])

        # Check the draft move.
        self.assertAmlsValues(draft_move.invoice_line_ids, [
            {
                'name': 'product_a',
                'product_id': self.product_a.id,
                'account_id': self.parent_acc_expense_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': self.uom_unit.id,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 800.0,
                'price_subtotal': 800.0,
                'price_total': 920.0,
                'tax_ids': self.parent_tax_purchase_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 800.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
            },
        ])
        self.assertAmlsValues(draft_move.line_ids, [
            {
                'name': '/',
                'product_id': False,
                'account_id': self.parent_acc_payable_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': -920.0,
                'price_subtotal': -920.0,
                'price_total': -920.0,
                'tax_ids': [],
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 920.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': 'balance',
                'date_maturity': fields.Date.from_string('2019-01-01'),
                'tax_exigible': True,
            },
            {
                'name': self.parent_tax_purchase_1.name,
                'product_id': False,
                'account_id': self.parent_tax_purchase_1.account_id.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 120.0,
                'price_subtotal': 120.0,
                'price_total': 120.0,
                'tax_ids': [],
                'tax_line_id': self.parent_tax_purchase_1.id,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 120.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': 'tax',
                'date_maturity': False,
                'tax_exigible': True,
            },
            {
                'name': 'product_a',
                'product_id': self.product_a.id,
                'account_id': self.parent_acc_expense_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': self.uom_unit.id,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 800.0,
                'price_subtotal': 800.0,
                'price_total': 920.0,
                'tax_ids': self.parent_tax_purchase_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 800.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
            },
        ])
        self.assertRecordValues(draft_move, [{
            'partner_id': self.partner_a.id,
            'currency_id': self.company_parent.currency_id.id,
            'journal_id': self.parent_journal_purchase_1.id,
            'type': 'in_invoice',
            'date': fields.Date.from_string('2019-02-01'),
            'fiscal_position_id': False,
            'invoice_payment_ref': '/',
            'invoice_payment_term_id': self.pay_terms_immediate.id,
            'amount_untaxed': 800.0,
            'amount_tax': 120.0,
            'amount_total': 920.0,
            'amount_residual': 920.0,
            'state': 'draft',
            'invoice_payment_state': 'not_paid',
        }])

    def test_reversal_in_invoice_3_modify_refund_manual_tax(self):
        # Create an 'in_invoice' journal entry.
        move = self.env['account.move'].with_context(default_type='in_invoice').create({
            'type': 'in_invoice',
            'partner_id': self.partner_a.id,
            'invoice_date': fields.Date.from_string('2019-01-01'),
            'invoice_payment_term_id': self.pay_terms_immediate.id,
            'invoice_line_ids': [(0, None, {
                'partner_id': self.partner_a.id,
                'product_id': self.product_a.id,
                'product_uom_id': self.product_a.uom_id.id,
                'name': self.product_a.name,
                'price_unit': 800.0,
                'quantity': 1,
                'tax_ids': [(6, 0, self.product_a.supplier_taxes_id.ids)],
            })]
        })

        move_form = Form(move)
        index_tax_line, _ = self._search_candidate_records(move.line_ids, {'tax_line_id': self.product_a.supplier_taxes_id.id})
        with move_form.line_ids.edit(index_tax_line) as line_form:
            line_form.debit += 1.0
        move = move_form.save()

        # Create an 'out_refund' journal entry with refund_method='modify'.
        move_reversal = self.env['account.move.reversal'].with_context(active_ids=move.ids).create({
            'date': fields.Date.from_string('2019-02-01'),
            'reason': 'no reason',
            'refund_method': 'modify',
        })
        reversal = move_reversal.reverse_moves()
        reverse_move = move.mapped('line_ids.matched_debit_ids.debit_move_id.move_id')
        draft_move = self.env['account.move'].browse(reversal['res_id'])

        # Check the reverse_move.
        self.assertTrue(reverse_move.exists())
        self.assertAmlsValues(reverse_move.invoice_line_ids, [
            {
                'name': 'product_a',
                'product_id': self.product_a.id,
                'account_id': self.parent_acc_expense_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': self.uom_unit.id,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 800.0,
                'price_subtotal': 800.0,
                'price_total': 920.0,
                'tax_ids': self.parent_tax_purchase_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 800.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
            },
        ])
        self.assertAmlsValues(reverse_move.line_ids, [
            {
                'name': '/',
                'product_id': False,
                'account_id': self.parent_acc_payable_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': -921.0,
                'price_subtotal': -921.0,
                'price_total': -921.0,
                'tax_ids': [],
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 921.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': 'balance',
                'date_maturity': fields.Date.from_string('2019-01-01'),
                'tax_exigible': True,
            },
            {
                'name': self.parent_tax_purchase_1.name,
                'product_id': False,
                'account_id': self.parent_tax_purchase_1.refund_account_id.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 121.0,
                'price_subtotal': 121.0,
                'price_total': 121.0,
                'tax_ids': [],
                'tax_line_id': self.parent_tax_purchase_1.id,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 121.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': 'tax',
                'date_maturity': False,
                'tax_exigible': True,
            },
            {
                'name': 'product_a',
                'product_id': self.product_a.id,
                'account_id': self.parent_acc_expense_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': self.uom_unit.id,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 800.0,
                'price_subtotal': 800.0,
                'price_total': 920.0,
                'tax_ids': self.parent_tax_purchase_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 800.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
            },
        ])
        self.assertRecordValues(reverse_move, [{
            'partner_id': self.partner_a.id,
            'currency_id': self.company_parent.currency_id.id,
            'journal_id': self.parent_journal_purchase_1.id,
            'type': 'in_refund',
            'date': fields.Date.from_string('2019-02-01'),
            'fiscal_position_id': False,
            'invoice_payment_ref': 'no reason',
            'invoice_payment_term_id': self.pay_terms_immediate.id,
            'amount_untaxed': 800.0,
            'amount_tax': 121.0,
            'amount_total': 921.0,
            'amount_residual': 0.0,
            'state': 'posted',
            'invoice_payment_state': 'paid',
        }])

        # Check the draft move.
        self.assertAmlsValues(draft_move.invoice_line_ids, [
            {
                'name': 'product_a',
                'product_id': self.product_a.id,
                'account_id': self.parent_acc_expense_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': self.uom_unit.id,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 800.0,
                'price_subtotal': 800.0,
                'price_total': 920.0,
                'tax_ids': self.parent_tax_purchase_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 800.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
            },
        ])
        self.assertAmlsValues(draft_move.line_ids, [
            {
                'name': '/',
                'product_id': False,
                'account_id': self.parent_acc_payable_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': -921.0,
                'price_subtotal': -921.0,
                'price_total': -921.0,
                'tax_ids': [],
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 921.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': 'balance',
                'date_maturity': fields.Date.from_string('2019-01-01'),
                'tax_exigible': True,
            },
            {
                'name': self.parent_tax_purchase_1.name,
                'product_id': False,
                'account_id': self.parent_tax_purchase_1.account_id.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 121.0,
                'price_subtotal': 121.0,
                'price_total': 121.0,
                'tax_ids': [],
                'tax_line_id': self.parent_tax_purchase_1.id,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 121.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': 'tax',
                'date_maturity': False,
                'tax_exigible': True,
            },
            {
                'name': 'product_a',
                'product_id': self.product_a.id,
                'account_id': self.parent_acc_expense_1.id,
                'partner_id': self.partner_a.id,
                'product_uom_id': self.uom_unit.id,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 800.0,
                'price_subtotal': 800.0,
                'price_total': 920.0,
                'tax_ids': self.parent_tax_purchase_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 800.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
            },
        ])
        self.assertRecordValues(draft_move, [{
            'partner_id': self.partner_a.id,
            'currency_id': self.company_parent.currency_id.id,
            'journal_id': self.parent_journal_purchase_1.id,
            'type': 'in_invoice',
            'date': fields.Date.from_string('2019-02-01'),
            'fiscal_position_id': False,
            'invoice_payment_ref': '/',
            'invoice_payment_term_id': self.pay_terms_immediate.id,
            'amount_untaxed': 800.0,
            'amount_tax': 121.0,
            'amount_total': 921.0,
            'amount_residual': 921.0,
            'state': 'draft',
            'invoice_payment_state': 'not_paid',
        }])

    # -------------------------------------------------------------------------
    # TESTS Miscellaneous operations
    # -------------------------------------------------------------------------

    def test_reversal_misc_2_cancel_refund(self):
        move = self.env['account.move'].create({
            'default_type': 'entry',
            'line_ids': [
                (0, None, {
                    'account_id': self.parent_acc_revenue_1.id,
                    'debit': 0.0,
                    'credit': 1000.0,
                    'tax_ids': [(6, 0, self.parent_tax_sale_1.ids)],
                }),
                (0, None, {
                    'account_id': self.parent_tax_sale_1.account_id.id,
                    'debit': 0.0,
                    'credit': 150.0,
                    'tax_line_id': self.parent_tax_sale_1.id,
                }),
                (0, None, {
                    'account_id': self.parent_acc_receivable_1.id,
                    'debit': 1150.0,
                    'credit': 0.0,
                }),
            ]
        })

        move_reversal = self.env['account.move.reversal'].with_context(active_ids=move.ids).create({
            'date': fields.Date.from_string('2019-02-01'),
            'journal_id': self.parent_journal_sale_1.id,
        })
        reversal = move_reversal.reverse_moves()
        reverse_move = self.env['account.move'].browse(reversal['res_id'])

        self.assertAmlsValues(reverse_move.line_ids, [
            {
                'name': False,
                'product_id': False,
                'account_id': self.parent_acc_receivable_1.id,
                'partner_id': False,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 0.0,
                'price_subtotal': 0.0,
                'price_total': 0.0,
                'tax_ids': [],
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 0.0,
                'credit': 1150.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
            },
            {
                'name': False,
                'product_id': False,
                'account_id': self.parent_tax_sale_1.account_id.id,
                'partner_id': False,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 0.0,
                'price_subtotal': 0.0,
                'price_total': 0.0,
                'tax_ids': [],
                'tax_line_id': self.parent_tax_sale_1.id,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 150.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
            },
            {
                'name': False,
                'product_id': False,
                'account_id': self.parent_acc_revenue_1.id,
                'partner_id': False,
                'product_uom_id': False,
                'quantity': 1.0,
                'discount': 0.0,
                'price_unit': 0.0,
                'price_subtotal': 0.0,
                'price_total': 0.0,
                'tax_ids': self.parent_tax_sale_1.ids,
                'tax_line_id': False,
                'currency_id': False,
                'amount_currency': 0.0,
                'debit': 1000.0,
                'credit': 0.0,
                'analytic_account_id': False,
                'analytic_tag_ids': [],
                'display_type': False,
                'date_maturity': False,
                'tax_exigible': True,
            },
        ])
        self.assertRecordValues(reverse_move, [{
            'partner_id': False,
            'currency_id': self.company_parent.currency_id.id,
            'journal_id': self.parent_journal_sale_1.id,
            'type': 'entry',
            'date': fields.Date.from_string('2019-02-01'),
            'fiscal_position_id': False,
            'invoice_payment_ref': False,
            'invoice_payment_term_id': False,
            'amount_total': 1150.0,
            'amount_residual': 0.0,
            'state': 'posted',
            'invoice_payment_state': 'paid',
        }])
